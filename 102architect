#!/usr/bin/env python3
##
## EPITECH PROJECT, 2018
## 102
## File description:
## 102
##

from math import *

import sys
import math
def translation(a, argv, a1, a2, a3):
    
    t1 = [a1[0], a1[1], int(sys.argv[a + 1]) + a1[2]]
    t2 = [a2[0], a2[1], int(sys.argv[a + 2]) + a2[2]]
    t3 = [0, 0, 1]
    print("Translation along vector ("+sys.argv[a + 1]+',', sys.argv[a + 2]+')')
    return (t1, t2, t3)


def scaling(a, argv, a1, a2, a3):

    z1 = [(int(sys.argv[a + 1])) * a1[0], a1[1], a1[2]]
    z2 = [a2[0], (int(sys.argv[a + 2])) * a2[1], a2[2]]
    z3 = [0, 0, 1]
    print("Scaling by factors", sys.argv[a + 1], "and", sys.argv[a + 2])
    return (z1, z2, z3)

def rotation(a, argv, a1, a2, a3):
    
    cos = math.cos(math.radians(int(sys.argv[a + 1])))
    sin = math.sin(math.radians(int(sys.argv[a + 1])))
    print("Rotation by a", sys.argv[a + 1], "degree angle")
    r1 = [cos, sin * (-1), 0]
    r2 = [sin, cos, 0]
    r3 = [0, 0, 1]
    return (r1, r2, r3)

def reflexion(a, argv, a1, a2, a3):

    cos = math.cos(math.radians(int(sys.argv[a + 1]) * 2))
    sin = math.sin(math.radians(int(sys.argv[a + 1]) * 2))

    print("Reflexion over an axis with an inclination angle of", sys.argv[a + 1], "degree")
    s1 = [cos, sin, 0]
    s2 = [sin, cos * (-1), 0]
    s3 = [0, 0, 1]
    return (s1, s2, s3)

def matrices():
    a1 = [1, 0, 0]
    a2 = [0, 1, 0]
    a3 = [0, 0, 1]

    t1 = [1, 0, 0]
    t2 = [0, 1, 0]
    t3 = [0, 0, 1]

    z1 = [1, 0, 0]
    z2 = [0, 1, 0]
    z3 = [0, 0, 1]

    r1 = [1, 0, 0]
    r2 = [0, 1, 0]
    r3 = [0, 0, 1]

    s1 = [1, 0, 0]
    s2 = [0, 1, 0]
    s3 = [0, 0, 1]

    return (a1, a2, a3, t1, t2, t3, z1, z2, z3, r1, r2, r3, s1, s2, s3)


def moving_in_main(argv):
    a = 0
    a1, a2, a3, t1, t2, t3, z1, z2, z3, r1, r2, r3, s1, s2, s3 = matrices()

    while (a < len(sys.argv)):
        if (sys.argv[a] == "-t"):
            t1, t2, t3 = translation(a, sys.argv, a1, a2, a3)
        if (sys.argv[a] == "-z"):
            z1, z2, z3 = scaling(a, sys.argv, a1, a2, a3)
        if (sys.argv[a] == "-r"):
            r1, r2, r3 = rotation(a, sys.argv, a1, a2, a3)
        if (sys.argv[a] == "-s"):
            s1, s2, s3 = reflexion(a, sys.argv, a1, a2, a3)
        a = a + 1
        
        
    v1 = [z1[0] * t1[0] + z1[1] * t2[0] + z1[2] * t3[0], z1[0] * t1[1] + z1[1] * t2[1] + z1[2] * t3[1], z1[0] * t1[2] + z1[1] * t2[2] + z1[2] * t3[2]]
    v2 = [z2[0] * t1[0] + z2[1] * t2[0] + z2[2] * t3[0], z2[0] * t1[1] + z2[1] * t2[1] + z2[2] * t3[1], z2[0] * t1[2] + z2[1] * t2[2] + z2[2] * t3[2]]
    v3 = [z3[0] * t1[0] + z3[1] * t2[0] + z3[2] * t3[0], z3[0] * t1[1] + z3[1] * t2[1] + z3[2] * t3[1], z3[0] * t1[2] + z3[1] * t2[2] + z3[2] * t3[2]]

    w1 = [r1[0] * v1[0] + r1[1] * v2[0] + r1[2] * v3[0], r1[0] * v1[1] + r1[1] * v2[1] + r1[2] * v3[1], r1[0] * v1[2] + r1[1] * v2[2] + r1[2] * v3[2]]
    w2 = [r2[0] * v1[0] + r2[1] * v2[0] + r2[2] * v3[0], r2[0] * v1[1] + r2[1] * v2[1] + r2[2] * v3[1], r2[0] * v1[2] + r2[1] * v2[2] + r2[2] * v3[2]]
    w3 = [r3[0] * v1[0] + r3[1] * v2[0] + r3[2] * v3[0], r3[0] * v1[1] + r3[1] * v2[1] + r3[2] * v3[1], r3[0] * v1[2] + r3[1] * v2[2] + r3[2] * v3[2]]

    x1 = [s1[0] * w1[0] + s1[1] * w2[0] + s1[2] * w3[0], s1[0] * w1[1] + s1[1] * w2[1] + s1[2] * w3[1], s1[0] * w1[2] + s1[1] * w2[2] + s1[2] * w3[2]]
    x2 = [s2[0] * w1[0] + s2[1] * w2[0] + s2[2] * w3[0], s2[0] * w1[1] + s2[1] * w2[1] + s2[2] * w3[1], s2[0] * w1[2] + s2[1] * w2[2] + s2[2] * w3[2]]
    x3 = [s3[0] * w1[0] + s3[1] * w2[0] + s3[2] * w3[0], s3[0] * w1[1] + s3[1] * w2[1] + s3[2] * w3[1], s3[0] * w1[2] + s3[1] * w2[2] + s3[2] * w3[2]]

    resultat1 = int(argv[1]) * x1[0] + int(argv[2]) * x1[1] + x1[2] * 1
    resultat2 =	int(argv[1]) * x2[0] + int(argv[2]) * x2[1] + x2[2] * 1    

    print("{:.2f}".format(x1[0])," ", "{:.2f}".format(x1[1])," ", "{:.2f}".format(x1[2]))
    print("{:.2f}".format(x2[0])," ", "{:.2f}".format(x2[1])," ", "{:.2f}".format(x2[2]))
    print("{:.2f}".format(x3[0])," ", "{:.2f}".format(x3[1])," ", "{:.2f}".format(x3[2]))    
    ress ="{:.2f}".format(resultat1)
    ress1 = "{:.2f}".format(resultat2)
    print('('+argv[1]+',', argv[2]+')', "=>", '('+ress+',', ress1+')')
if __name__ == '__main__':
    if (len(sys.argv) == 3):
        exit (84)
    if (sys.argv[1] == "-h"):
        print("USAGE\n ./102architect x y transfo1 arg11 [arg12] [transfo2 arg12 [arg22]] ...\n\nDESCRIPTION\n x abscissa of the original point\n y ordinate of the original point\n\n transfo arg1 [arg2]\n -t i j translation along vector (i, j)\n -z m n scaling by factors m (x-axis) and n (y-axis)\n -r d rotation centered in O by a d degree angle\n -s d reflection over the axis passing through O with an inclination angle of d degrees")
        exit(0)
    moving_in_main(sys.argv)
